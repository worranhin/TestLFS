/***********************************************************
 * File generated by the HALCON-Compiler hcomp version 24.11
 * Usage: Interface to C++
 *
 * Software by: MVTec Software GmbH, www.mvtec.com
 ***********************************************************/


#ifndef HCPP_HDEEPMATCHING3D
#define HCPP_HDEEPMATCHING3D

namespace HalconCpp
{

// Represents an instance of a Deep Neural Network based Deep 3D Matching model.
class LIntExport HDeepMatching3D : public HHandle
{

public:

  // Create an uninitialized instance
  HDeepMatching3D():HHandle() {}

  // Copy constructor
  HDeepMatching3D(const HDeepMatching3D& source) : HHandle(source) {}

#if __cplusplus >= 201103
  // C++11 deprecates declaration of an implicit default assignment operator if
  // the class has a custom copy constructor.
  HDeepMatching3D& operator=(const HDeepMatching3D&) = default;
#endif

  // Copy constructor
  HDeepMatching3D(const HHandle& handle);

  // Create HDeepMatching3D from handle, taking ownership
  explicit HDeepMatching3D(Hlong handle);

  bool operator==(const HHandle& obj) const
  {
    return HHandleBase::operator==(obj);
  }

  bool operator!=(const HHandle& obj) const
  {
    return HHandleBase::operator!=(obj);
  }

protected:

  // Verify matching semantic type ('deep_matching_3d')!
  virtual void AssertType(Hphandle handle) const;

public:



/*****************************************************************************
 * Operator-based class constructors
 *****************************************************************************/

  // read_deep_matching_3d: Read a Deep 3D Matching model from a file.
  explicit HDeepMatching3D(const HString& FileName);

  // read_deep_matching_3d: Read a Deep 3D Matching model from a file.
  explicit HDeepMatching3D(const char* FileName);

#ifdef _WIN32
  // read_deep_matching_3d: Read a Deep 3D Matching model from a file.
  explicit HDeepMatching3D(const wchar_t* FileName);
#endif




  /***************************************************************************
   * Operators                                                               *
   ***************************************************************************/

  // Find the pose of objects using Deep 3D Matching.
  HDictArray ApplyDeepMatching3d(const HImage& Images) const;

  // Read a parameter from a Deep 3D Matching model.
  HTuple GetDeepMatching3dParam(const HTuple& GenParamName) const;

  // Read a parameter from a Deep 3D Matching model.
  HTuple GetDeepMatching3dParam(const HString& GenParamName) const;

  // Read a parameter from a Deep 3D Matching model.
  HTuple GetDeepMatching3dParam(const char* GenParamName) const;

#ifdef _WIN32
  // Read a parameter from a Deep 3D Matching model.
  HTuple GetDeepMatching3dParam(const wchar_t* GenParamName) const;
#endif

  // Read a Deep 3D Matching model from a file.
  void ReadDeepMatching3d(const HString& FileName);

  // Read a Deep 3D Matching model from a file.
  void ReadDeepMatching3d(const char* FileName);

#ifdef _WIN32
  // Read a Deep 3D Matching model from a file.
  void ReadDeepMatching3d(const wchar_t* FileName);
#endif

  // Set a parameter of a Deep 3D Matching model.
  void SetDeepMatching3dParam(const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Set a parameter of a Deep 3D Matching model.
  void SetDeepMatching3dParam(const HString& GenParamName, const HString& GenParamValue) const;

  // Set a parameter of a Deep 3D Matching model.
  void SetDeepMatching3dParam(const char* GenParamName, const char* GenParamValue) const;

#ifdef _WIN32
  // Set a parameter of a Deep 3D Matching model.
  void SetDeepMatching3dParam(const wchar_t* GenParamName, const wchar_t* GenParamValue) const;
#endif

  // Write a Deep 3D Matching model in a file.
  void WriteDeepMatching3d(const HString& FileName) const;

  // Write a Deep 3D Matching model in a file.
  void WriteDeepMatching3d(const char* FileName) const;

#ifdef _WIN32
  // Write a Deep 3D Matching model in a file.
  void WriteDeepMatching3d(const wchar_t* FileName) const;
#endif

};

// forward declarations and types for internal array implementation

template<class T> class HSmartPtr;
template<class T> class HHandleBaseArrayRef;

typedef HHandleBaseArrayRef<HDeepMatching3D> HDeepMatching3DArrayRef;
typedef HSmartPtr< HDeepMatching3DArrayRef > HDeepMatching3DArrayPtr;


// Represents multiple tool instances
class LIntExport HDeepMatching3DArray : public HHandleBaseArray
{

public:

  // Create empty array
  HDeepMatching3DArray();

  // Create array from native array of tool instances
  HDeepMatching3DArray(const HDeepMatching3D* classes, Hlong length);

  // Copy constructor
  HDeepMatching3DArray(const HDeepMatching3DArray &tool_array);

  // Destructor
  virtual ~HDeepMatching3DArray();

  // Assignment operator
  HDeepMatching3DArray &operator=(const HDeepMatching3DArray &tool_array);

  // Clears array and all tool instances
  virtual void Clear();

  // Get array of native tool instances
  const HDeepMatching3D* Tools() const;

  // Get number of tools
  virtual Hlong Length() const;

  // Create tool array from tuple of handles
  virtual void SetFromTuple(const HTuple& handles);

  // Get tuple of handles for tool array
  virtual HTuple ConvertToTuple() const;

protected:

// Smart pointer to internal data container
   HDeepMatching3DArrayPtr *mArrayPtr;
};

}

#endif
